// Generated by CoffeeScript 1.10.0

/**
 * @module       RD RDToggles
 * @author       Aleksey Patsurvkoskiy
 * @see          https://ua.linkedin.com/in/mnemon1k
 * @version      0.2.1
 */

(function() {
  (function($, document, window) {
    var RDToggles;
    RDToggles = (function() {
      var Toggle;

      Toggle = (function() {
        function Toggle(element, elemClass) {
          this.elemClass = elemClass;
          if (element.tagName.toLowerCase() === "input") {
            this.$element = $(element);
            this.$wrap = this.$element.wrap('<div class=' + this.elemClass + "-outer" + '></div>').parent();
          } else {
            this.$element = $(element).find("input[type='checkbox']");
            this.$wrap = this.$element.wrap('<div class=' + this.elemClass + "-outer" + '></div>').parent();
          }
          if (this.$element[0].checked) {
            this.$wrap.addClass("active");
          } else {
            this.$wrap.removeClass("active");
          }
          this.addHandlers();
        }


        /**
         * Applies JS event handlers
         * @protected
         */

        Toggle.prototype.addHandlers = function() {
          var ctx;
          ctx = this;
          if (ctx.$element[0].type === "radio") {
            ctx.$wrap.on("click", $.proxy(ctx.radioHandler, ctx));
            return;
          }
          return ctx.$wrap.on("click", $.proxy(ctx.checkboxHandler, ctx));
        };


        /**
         * Checkbox onclick handler
         * @protected
         */

        Toggle.prototype.checkboxHandler = function(e) {
          var ctx;
          ctx = this;
          if (e.target !== e.currentTarget || e.target.tagName.toLowerCase() === "input") {
            e.stopPropagation();
            return ctx.$wrap.toggleClass("active");
          } else {
            e.preventDefault();
            ctx.$element[0].checked = !ctx.$element[0].checked;
            return ctx.$wrap.toggleClass("active");
          }
        };


        /**
         * Radio onclick handler
         * @protected
         */

        Toggle.prototype.radioHandler = function(e) {
          var ctx;
          ctx = this;
          $("[name=" + ctx.$element[0].name + "]").each(function() {
            this.checked = false;
            return $(this).closest("." + ctx.elemClass + "-outer").removeClass("active");
          });
          ctx.$wrap.addClass("active");
          return ctx.$element[0].checked = true;
        };

        return Toggle;

      })();


      /**
       * Default options for RDToggles.
       * @public
       */

      RDToggles.prototype.Defaults = {
        toggleClass: "mfToggle__input",
        radioClass: "mfRadio__input",
        checkboxClass: "mfCheckbox__input"
      };

      function RDToggles(options) {
        this.options = $.extend(true, {}, this.Defaults, options);
        this.toggles = $("." + this.options.toggleClass);
        this.checkboxs = $("." + this.options.checkboxClass);
        this.radiobtns = $("." + this.options.radioClass);
        this.initialize();
      }


      /**
       * Initializes the RDToggles.
       * @protected
       */

      RDToggles.prototype.initialize = function() {
        var checkbox, ctx, i, j, k, len, len1, len2, radio, ref, ref1, ref2, results, toggle;
        ctx = this;
        ref = ctx.toggles;
        for (i = 0, len = ref.length; i < len; i++) {
          toggle = ref[i];
          new Toggle(toggle, ctx.options.toggleClass);
        }
        ref1 = ctx.checkboxs;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          checkbox = ref1[j];
          new Toggle(checkbox, ctx.options.checkboxClass);
        }
        ref2 = ctx.radiobtns;
        results = [];
        for (k = 0, len2 = ref2.length; k < len2; k++) {
          radio = ref2[k];
          results.push(new Toggle(radio, ctx.options.radioClass));
        }
        return results;
      };

      return RDToggles;

    })();

    /**
     * The jQuery Plugin for the RDToggles
     * @public
     */
    $.RDToggles = function(options) {
      var $doc;
      $doc = $(document);
      if (!$doc.data('RDToggles')) {
        return $doc.data('RDToggles', new RDToggles(options));
      }
    };
    return window.RDToggles = RDToggles;
  })(window.jQuery, document, window);


  /**
   * The Plugin AMD export
   * @public
   */

  if (typeof module !== "undefined" && module !== null) {
    module.exports = window.RDToggles;
  } else if (typeof define === 'function' && define.amd) {
    define(["jquery"], function() {
      'use strict';
      return window.RDToggles;
    });
  }

}).call(this);
